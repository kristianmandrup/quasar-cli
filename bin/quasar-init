#!/usr/bin/env node

var
  command = require('commander'),
  uid = require('uid'),
  ora = require('ora'),
  download = require('download-github-repo'),
  log = require('../lib/log'),
  qfs = require('../lib/qfs'),
  getList = require('../lib/template-list'),
  spinner

command
  .usage('[app template] <folder>')
  .on('--help', function () {
    log('  Example:')
    log()
    log('    # create todoApp folder with latest app template:'.gray)
    log('    $ quasar init todoApp')
    log()
    log('    # use "v1" app template for new todoApp folder:'.gray)
    log('    $ quasar init v1 todoApp')
    log()
    log('  List available app templates:')
    log()
    log('    $ quasar list')
  })
  .parse(process.argv)

if (!command.args.length || command.args.length > 3) {
  command.help()
  process.exit(1)
  // ^^^ EARLY EXIT
}

log.info('Generating Quasar App...')
log()

if (command.args.length === 1) {
  spinner = ora('Determining newest template...')
  spinner.start()

  getList(function (err, templates) {
    var sorted, template

    spinner.stop()

    if (err) {
      log.fatal('Could not retrieve App template list: ' + err)
      // ^^^ EARLY EXIT
    }

    sorted = templates.filter(function (template) {
      return /^v[\d]+$/.test(template)
    }).map(function (template) {
      return parseInt(template.substring(1), 10)
    }).sort()

    template = 'v' + sorted[sorted.length - 1]

    log.success('Latest App template is ' + template.gray)

    run(
      template,
      command.args[0]
    )
  })
}
else {
  run(
    command.args[0],
    command.args[1],
    command.args[2]
  )
}

function run (template, dest, repo) {
  if (dest && dest[0] === '@') {
    repo = dest.slice(1)
    dest = template
  }

  dest = qfs.join(process.cwd(), dest)

  if (qfs.exists(dest)) {
    log.fatal('Destination folder "' + dest.gray + '" already exists.')
    // ^^^ EARLY EXIT
  }

  var src = '/tmp/quasar-template-' + uid()

  spinner = ora('Downloading App template ' + template.gray)
  spinner.start()

  if (repo[0] === '@')
    repo = repo.slice(1)

  if (!repo.match(/\//)) 
    repo = repo + '/quasar-templates'

  var repo = repo || 'rstoenescu/quasar-templates'

  download(
    repo + '#' + template,
    src,
    function (err) {
      spinner.stop()
      process.on('exit', function () {
        qfs.remove(src)
      })

      if (err) {
        if (err === 404) {
          log.fatal('Template ' + template.gray + ' is not available.')
          // ^^^ EARLY EXIT
        }

        log.fatal('Failed to download App template ' + template.gray + ': ' + err)
        // ^^^ EARLY EXIT
      }

      log.success('Downloaded App template ' + template.gray)
      generate(template, src, dest, repo)
    }
  )
}

function generate (template, src, dest, repo) {
  if (qfs.copy(qfs.join(src, 'template'), dest)) {
    log.fatal('Failed to copy App template.')
    // ^^^ EARLY EXIT
  }

  log.success(
    'Generated Quasar App from template "' +
    template.gray + '" @' + repo + ' in ' + dest.gray
  )
  log()
  log('  To get started:')
  log()
  log('  $ cd ' + dest.gray)
  log('  # edit package.json'.gray)
  log('  $ npm install')
  log('  $ quasar dev')
}
