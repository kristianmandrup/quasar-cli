#!/usr/bin/env node

var
  command = require('commander'),
  inquirer = require('inquirer'),
  log = require('../lib/log'),
  qfs = require('../lib/qfs'),
  spawn = require('../lib/spawn')

if (!qfs.is.inAppFolder()) {
  log.fatal('Not in an App folder.')
  // ^^^ EARLY EXIT
}

var // eslint-disable-line one-var
  appPath = qfs.get.root()

command
  .on('--help', function () {
    log('  Examples:')
    log()
    log('    # generate Cordova wrapper'.gray)
    log('    $ quasar wrap cordova')
    log()
    log('    # generate Electron wrapper'.gray)
    log('    $ quasar wrap electron')
  })
  .parse(process.argv)

command.parse(process.argv)

var env = {}  

function config(env, wrapper) {
  isWrapped = qfs.exists(qfs.join(appPath, wrapper)),
  buildAvailable = qfs.exists(qfs.join(appPath, 'dist'))

  if (!buildAvailable) {
    log.fatal('Make a build first ("quasar build") otherwise ' + wrapper + ' will error out.')
    // ^^^ EARLY EXIT
  }

  if (isWrapped) {
    log.fatal('App is already wrapped with ' + wrapper)
    // ^^^ EARLY EXIT
  }
  return env;
}

var wrapWith = require('./wrap')

switch (command.args[0]) {
  case 'electron':
    env = config('electron');

    // todo: use inquirer to select some options?

    var options = {
    }

    wrapWith.electron(options)
    return;

  case 'cordova':
    env = config('cordova');

    inquirer
      .prompt([{
        type: 'confirm',
        name: 'withCrosswalk',
        message: 'Install Crosswalk WebView plugin for Android Apps (HIGHLY recommended)',
        default: true
      }])
      .then(function (answer) {
        console.log()
        wrapWith.cordova({
          withCrosswalk: answer.withCrosswalk,
          appPath: appPath
        })
      })
    break

  default:
    command.help()
    process.exit(1)
    // ^^^ EARLY EXIT
}

